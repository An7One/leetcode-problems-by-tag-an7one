@author: Leon
Reference:
    https://github.com/huanminwu/LeetCode/blob/master/LeetCode.xlsx
    https://leetcode.com/tag/dynamic-programming/


### Dynamic Programming
# Longest Common Subsequence

3   0583    https://leetcode.com/problems/delete-operation-for-two-strings/
3   0712    https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/
3   1143    https://leetcode.com/problems/longest-common-subsequence/

4   0072    https://leetcode.com/problems/edit-distance/
4   0097    https://leetcode.com/problems/interleaving-string/
4   0115    https://leetcode.com/problems/distinct-subsequences/
4   0727    https://leetcode.com/problems/minimum-window-subsequence/
4   0801    https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/
4   1035    https://leetcode.com/problems/uncrossed-lines/
4   1062    https://leetcode.com/problems/longest-repeating-substring/
4   1092    https://leetcode.com/problems/shortest-common-supersequence/
4   1216    https://leetcode.com/problems/valid-palindrome-iii/
4   1312    https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/
4   1458    https://leetcode.com/problems/max-dot-product-of-two-subsequences/



Resources:
    https://www.youtube.com/watch?v=kufFb-sReiA
    Paid Course, 60min: https://www.acwing.com/video/35/



动态规划
    状态表示
        集合: 所有再第一个序列的前i个字母中出现，且在第二个序列的前j个字母中出现的子序列
        属性: 最大值(Max)
    状态计算 f[i, j]
        `00`: f[i - 1, j - 1]
        `01`: f[i - 1, j] surely includes `01`, since it is about `Max`, f[i - 1, j] can represents `01`
        `10`: f[i, j - 1] surely includes `10`, similarly above
        `11`: 1 + f[i, j]算